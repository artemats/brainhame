//$primary: random-color($min: 100, $max: 100);
//$primary-light: mix(#ffffff, $primary, 25%);
//$primary-dark: mix(#000000, $primary, 25%);

$primary: #000000;
$primary-dark: $primary;

$pix-size: 4px;


.hamburger {
  position: relative;
  display: none;
  width: ($pix-size*5);
  height: ($pix-size*5);
  //margin: 2rem auto 0 auto;

  background-color: transparent;
  padding: 0;
  border: 0;
  font-size: 0;
  line-height: 0;

  cursor: pointer;

  @include respond-to(xs) {
    display: block;
  }

  .pix {
    position: absolute;
    width: $pix-size;
    height: $pix-size;
    background-color: $primary;
    //border-radius: 100%;
    transition: 0.2s ease-in-out;
    display: block;

    $num: 0;
    @for $i from 1 through 9 {
      @if $i%3 == 1 {
        $num: 0;
      }

      &:nth-of-type(#{$i}) {
        transform: translate(($pix-size*2)*$num, ($pix-size*2)*(floor(($i - 1)/3)))
      }

      $num: $num + 1;
    }
  }

  //&:hover {
  //  .pix {
  //    background-color: $primary-dark;
  //
  //    &:nth-of-type(1) { transform: translate(-($pix-size), -($pix-size)); }
  //    &:nth-of-type(3) { transform: translate(($pix-size*5), -($pix-size)); }
  //    &:nth-of-type(7) { transform: translate(-($pix-size), ($pix-size*5)); }
  //    &:nth-of-type(9) { transform: translate(($pix-size*5), ($pix-size*5)); }
  //  }
  //}

  &.active {
    .pix {
      &:nth-of-type(1) { transform: translate(0, 0); }
      &:nth-of-type(2) { transform: translate($pix-size, $pix-size); }
      &:nth-of-type(3) { transform: translate(($pix-size*4), 0); }
      &:nth-of-type(4) { transform: translate($pix-size, ($pix-size*3)); }
      &:nth-of-type(6) { transform: translate(($pix-size*3), $pix-size); }
      &:nth-of-type(7) { transform: translate(0, ($pix-size*4)); }
      &:nth-of-type(8) { transform: translate(($pix-size*3), ($pix-size*3)); }
      &:nth-of-type(9) { transform: translate(($pix-size*4), ($pix-size*4)); }
    }

    &:hover {
      .pix {
        &:nth-of-type(1) { transform: translate(-($pix-size), -($pix-size)); }
        &:nth-of-type(2) { transform: translate(($pix-size/2), ($pix-size/2)); }
        &:nth-of-type(3) { transform: translate(($pix-size*5), -($pix-size)); }
        &:nth-of-type(4) { transform: translate(($pix-size/2), ($pix-size*3.5)); }
        &:nth-of-type(6) { transform: translate(($pix-size*3.5), ($pix-size/2)); }
        &:nth-of-type(7) { transform: translate(-($pix-size), ($pix-size*5)); }
        &:nth-of-type(8) { transform: translate(($pix-size*3.5), ($pix-size*3.5)); }
        &:nth-of-type(9) { transform: translate(($pix-size*5), ($pix-size*5)); }
      }
    }
  }
}
